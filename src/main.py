import os
import random
import string
import json
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters
)

TOKEN = "8004240677:AAF8SUKjOA5cZ8Z92XGyT6N2yRppxPnS3Ns"

# –°–æ–æ–±—â–µ–Ω–∏—è
START_MESSAGE = """üîê *–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
- –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
- –°–ø—Ä–∞–≤–∫–∞"""

HELP_MESSAGE = """üìö *–°–ø—Ä–∞–≤–∫–∞*

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*
1. –ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"
2. –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
3. –í—ã–±–µ—Ä–∏—Ç–µ, –Ω—É–∂–Ω—ã –ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
4. –ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"
5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (–ø–æ –∂–µ–ª–∞–Ω–∏—é)

*–°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:*
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª–∏ –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤
- –í–∫–ª—é—á–∞–π—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    'length': 12,
    'use_special': True
}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
PASSWORDS_FILE = "bot/user_password.json"

def load_passwords():
    if not os.path.exists(PASSWORDS_FILE):
        return {}
    with open(PASSWORDS_FILE, 'r') as f:
        return json.load(f)

def save_passwords(passwords):
    with open(PASSWORDS_FILE, 'w') as f:
        json.dump(passwords, f, indent=2)

async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        ["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"],
        ["–ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏"],
        ["–°–ø—Ä–∞–≤–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        START_MESSAGE,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(HELP_MESSAGE, parse_mode='Markdown')

async def generate_password_menu(update: Update, context: CallbackContext) -> None:
    user_id = str(update.message.from_user.id)
    context.user_data.setdefault('settings', DEFAULT_SETTINGS.copy())
    
    keyboard = [
        ["–ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É"],
        ["–í–∫–ª —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã", "–í—ã–∫–ª —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã"],
        ["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"],
        ["–ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    settings = context.user_data['settings']
    message = (
        f"‚öô *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        f"‚Ä¢ –î–ª–∏–Ω–∞: {settings['length']} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"‚Ä¢ –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: {'–≤–∫–ª—é—á–µ–Ω—ã' if settings['use_special'] else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
        "–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å*"
    )
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def generate_new_password(update: Update, context: CallbackContext) -> None:
    settings = context.user_data.get('settings', DEFAULT_SETTINGS)
    characters = string.ascii_letters + string.digits
    if settings['use_special']:
        characters += string.punctuation
    
    password = ''.join(random.choice(characters) for _ in range(settings['length']))
    context.user_data['last_password'] = password
    
    keyboard = [
        ["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"],
        ["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π"],
        ["–ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    formatted_password = password.replace('`', '\\`')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    await update.message.reply_text(
        f"üîê *–í–∞—à –ø–∞—Ä–æ–ª—å:*\n\n`{formatted_password}`\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_password_settings(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    user_id = str(update.message.from_user.id)
    
    if text == "–ù–∞–∑–∞–¥":
        await start(update, context)
        return
    
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–æ—Ç 4 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        context.user_data['awaiting_length'] = True
        return
    
    if context.user_data.get('awaiting_length', False):
        try:
            length = int(text)
            if length < 4:
                await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 4 —Å–∏–º–≤–æ–ª–∞")
                return
            if length > 50:
                await update.message.reply_text("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 50 —Å–∏–º–≤–æ–ª–æ–≤")
                return
            
            context.user_data['settings']['length'] = length
            context.user_data['awaiting_length'] = False
            await update.message.reply_text(f"‚úÖ –î–ª–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {length} —Å–∏–º–≤–æ–ª–æ–≤")
            await generate_password_menu(update, context)
            return
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12)")
            return
    
    if text in ["–í–∫–ª —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã", "–í—ã–∫–ª —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã"]:
        context.user_data['settings']['use_special'] = text == "–í–∫–ª —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã"
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if text == "–í–∫–ª —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã" else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(f"‚úÖ –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã {status}")
        await generate_password_menu(update, context)
        return
    
    if text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å":
        await generate_new_password(update, context)
        return
    
    if text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π":
        await generate_new_password(update, context)
        return
    
    if text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ—á—Ç—ã'):",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        context.user_data['awaiting_description'] = True
        return
    
    if context.user_data.get('awaiting_description', False):
        if text == "–û—Ç–º–µ–Ω–∞":
            context.user_data['awaiting_description'] = False
            await generate_password_menu(update, context)
            return
        
        description = text
        password = context.user_data.get('last_password')
        
        if not password:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        passwords = load_passwords()
        if user_id not in passwords:
            passwords[user_id] = []
        
        passwords[user_id].append({
            "description": description,
            "password": password,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M")
        })
        save_passwords(passwords)
        
        context.user_data['awaiting_description'] = False
        await update.message.reply_text(
            f"‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: '{description}'",
            reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        return
    
    if text == "–ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏":
        passwords = load_passwords().get(user_id, [])
        
        if not passwords:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π",
                reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            )
            return
        
        message = "üîë *–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:*\n\n"
        for idx, item in enumerate(passwords, 1):
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
            safe_password = item['password'].replace('`', '\\`')
            message += (
                f"{idx}. *{item['description']}*\n"
                f"–ü–∞—Ä–æ–ª—å: `{safe_password}`\n"
                f"–°–æ–∑–¥–∞–Ω: {item['date']}\n\n"
            )
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        return
    
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.Regex("^–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å$"), generate_password_menu))
    app.add_handler(MessageHandler(filters.Regex("^–ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏$"), handle_password_settings))
    app.add_handler(MessageHandler(filters.Regex("^–°–ø—Ä–∞–≤–∫–∞$"), help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_password_settings))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()